package com.midnightcrowing.resource

import com.midnightcrowing.model.Texture

enum class TextureResourcesEnum(private val resource: ResourcesEnum) {
    /* region GUI */
    GUI_INVENTORY(ResourcesEnum.GUI_INVENTORY),
    GUI_TOAST(ResourcesEnum.GUI_TOAST),

    // hot bar
    GUI_HOT_BAR(ResourcesEnum.GUI_HOT_BAR),
    GUI_CHECK_BOX(ResourcesEnum.GUI_CHECK_BOX),

    // trade
    GUI_TRADE(ResourcesEnum.GUI_TRADE),
    GUI_TRADE_BUTTON_ABLE_TO_TRADE(ResourcesEnum.GUI_TRADE_BUTTON_ABLE_TO_TRADE),
    GUI_TRADE_BUTTON_UNABLE_TO_TRADE(ResourcesEnum.GUI_TRADE_BUTTON_UNABLE_TO_TRADE),
    GUI_TRADE_SCROLL_ACTIVE(ResourcesEnum.GUI_TRADE_SCROLL_ACTIVE),
    GUI_TRADE_SCROLL_DISABLED(ResourcesEnum.GUI_TRADE_SCROLL_DISABLED),
    GUI_TRADE_UNABLE_TO_TRADE(ResourcesEnum.GUI_TRADE_UNABLE_TO_TRADE),

    // compost
    GUI_COMPOST(ResourcesEnum.GUI_COMPOST),
    GUI_COMPOST_ARROW(ResourcesEnum.GUI_COMPOST_ARROW),

    // button
    GUI_BUTTON_DEFAULT(ResourcesEnum.GUI_BUTTON_DEFAULT),
    GUI_BUTTON_HOVER(ResourcesEnum.GUI_BUTTON_HOVER),
    GUI_BUTTON_DISABLED(ResourcesEnum.GUI_BUTTON_DISABLED),
    /* endregion */

    /* region Background */
    BG_MAIN_MENU_BACKGROUND(ResourcesEnum.BG_MAIN_MENU_BACKGROUND),
    BG_FARM_BACKGROUND(ResourcesEnum.BG_FARM_BACKGROUND),
    /* endregion */

    /* region Block */
    // Cabbage
    BLOCK_CABBAGE_GROW_0(ResourcesEnum.BLOCK_CABBAGE_GROW_0),
    BLOCK_CABBAGE_GROW_1(ResourcesEnum.BLOCK_CABBAGE_GROW_1),
    BLOCK_CABBAGE_GROW_2(ResourcesEnum.BLOCK_CABBAGE_GROW_2),
    BLOCK_CABBAGE_GROW_3(ResourcesEnum.BLOCK_CABBAGE_GROW_3),
    BLOCK_CABBAGE_GROW_4(ResourcesEnum.BLOCK_CABBAGE_GROW_4),
    BLOCK_CABBAGE_GROW_5(ResourcesEnum.BLOCK_CABBAGE_GROW_5),
    BLOCK_CABBAGE_GROW_6(ResourcesEnum.BLOCK_CABBAGE_GROW_6),
    BLOCK_CABBAGE_GROW_7(ResourcesEnum.BLOCK_CABBAGE_GROW_7),

    // Carrot
    BLOCK_CARROT_GROW_0(ResourcesEnum.BLOCK_CARROT_GROW_0),
    BLOCK_CARROT_GROW_2(ResourcesEnum.BLOCK_CARROT_GROW_2),
    BLOCK_CARROT_GROW_4(ResourcesEnum.BLOCK_CARROT_GROW_4),
    BLOCK_CARROT_GROW_7(ResourcesEnum.BLOCK_CARROT_GROW_7),

    // Corn
    BLOCK_CORN_GROW_0(ResourcesEnum.BLOCK_CORN_GROW_0),
    BLOCK_CORN_GROW_1(ResourcesEnum.BLOCK_CORN_GROW_1),
    BLOCK_CORN_GROW_2(ResourcesEnum.BLOCK_CORN_GROW_2),
    BLOCK_CORN_GROW_3(ResourcesEnum.BLOCK_CORN_GROW_3),
    BLOCK_CORN_GROW_4(ResourcesEnum.BLOCK_CORN_GROW_4),
    BLOCK_CORN_GROW_5(ResourcesEnum.BLOCK_CORN_GROW_5),
    BLOCK_CORN_GROW_6(ResourcesEnum.BLOCK_CORN_GROW_6),
    BLOCK_CORN_GROW_7(ResourcesEnum.BLOCK_CORN_GROW_7),

    // Cotton
    BLOCK_COTTON_GROW_0(ResourcesEnum.BLOCK_COTTON_GROW_0),
    BLOCK_COTTON_GROW_4(ResourcesEnum.BLOCK_COTTON_GROW_4),
    BLOCK_COTTON_GROW_7(ResourcesEnum.BLOCK_COTTON_GROW_7),

    // Onion
    BLOCK_ONION_GROW_0(ResourcesEnum.BLOCK_ONION_GROW_0),
    BLOCK_ONION_GROW_2(ResourcesEnum.BLOCK_ONION_GROW_2),
    BLOCK_ONION_GROW_4(ResourcesEnum.BLOCK_ONION_GROW_4),
    BLOCK_ONION_GROW_7(ResourcesEnum.BLOCK_ONION_GROW_7),

    // Potato
    BLOCK_POTATO_GROW_0(ResourcesEnum.BLOCK_POTATO_GROW_0),
    BLOCK_POTATO_GROW_2(ResourcesEnum.BLOCK_POTATO_GROW_2),
    BLOCK_POTATO_GROW_4(ResourcesEnum.BLOCK_POTATO_GROW_4),
    BLOCK_POTATO_GROW_7(ResourcesEnum.BLOCK_POTATO_GROW_7),

    // Tomato
    BLOCK_BUDDING_TOMATO_GROW_0(ResourcesEnum.BLOCK_BUDDING_TOMATO_GROW_0),
    BLOCK_BUDDING_TOMATO_GROW_1(ResourcesEnum.BLOCK_BUDDING_TOMATO_GROW_1),
    BLOCK_BUDDING_TOMATO_GROW_2(ResourcesEnum.BLOCK_BUDDING_TOMATO_GROW_2),
    BLOCK_BUDDING_TOMATO_GROW_3(ResourcesEnum.BLOCK_BUDDING_TOMATO_GROW_3),
    BLOCK_BUDDING_TOMATO_GROW_4(ResourcesEnum.BLOCK_BUDDING_TOMATO_GROW_4),
    BLOCK_TOMATO_GROW_0(ResourcesEnum.BLOCK_TOMATO_GROW_0),
    BLOCK_TOMATO_GROW_1(ResourcesEnum.BLOCK_TOMATO_GROW_1),
    BLOCK_TOMATO_GROW_2(ResourcesEnum.BLOCK_TOMATO_GROW_2),
    BLOCK_TOMATO_GROW_3(ResourcesEnum.BLOCK_TOMATO_GROW_3),

    // Wheat
    BLOCK_WHEAT_GROW_0(ResourcesEnum.BLOCK_WHEAT_GROW_0),
    BLOCK_WHEAT_GROW_1(ResourcesEnum.BLOCK_WHEAT_GROW_1),
    BLOCK_WHEAT_GROW_2(ResourcesEnum.BLOCK_WHEAT_GROW_2),
    BLOCK_WHEAT_GROW_3(ResourcesEnum.BLOCK_WHEAT_GROW_3),
    BLOCK_WHEAT_GROW_4(ResourcesEnum.BLOCK_WHEAT_GROW_4),
    BLOCK_WHEAT_GROW_5(ResourcesEnum.BLOCK_WHEAT_GROW_5),
    BLOCK_WHEAT_GROW_6(ResourcesEnum.BLOCK_WHEAT_GROW_6),
    BLOCK_WHEAT_GROW_7(ResourcesEnum.BLOCK_WHEAT_GROW_7),

    // Composter
    BLOCK_COMPOSTER_0(ResourcesEnum.BLOCK_COMPOSTER_0),
    BLOCK_COMPOSTER_4(ResourcesEnum.BLOCK_COMPOSTER_4),
    BLOCK_COMPOSTER_5(ResourcesEnum.BLOCK_COMPOSTER_5),
    BLOCK_COMPOSTER_6(ResourcesEnum.BLOCK_COMPOSTER_6),
    BLOCK_COMPOSTER_7(ResourcesEnum.BLOCK_COMPOSTER_7),
    BLOCK_COMPOSTER_8(ResourcesEnum.BLOCK_COMPOSTER_8),
    /* endregion */

    /* region Item */
    ITEM_ANVIL(ResourcesEnum.ITEM_ANVIL),
    ITEM_BONE_MEAL(ResourcesEnum.ITEM_BONE_MEAL),
    ITEM_CABBAGE(ResourcesEnum.ITEM_CABBAGE),
    ITEM_CABBAGE_SEED(ResourcesEnum.ITEM_CABBAGE_SEED),
    ITEM_CARROT(ResourcesEnum.ITEM_CARROT),
    ITEM_CHEST(ResourcesEnum.ITEM_CHEST),
    ITEM_COMPOSTER(ResourcesEnum.ITEM_COMPOSTER),
    ITEM_CORN(ResourcesEnum.ITEM_CORN),
    ITEM_CORN_SEED(ResourcesEnum.ITEM_CORN_SEED),
    ITEM_COTTON(ResourcesEnum.ITEM_COTTON),
    ITEM_COTTON_SEED(ResourcesEnum.ITEM_COTTON_SEED),
    ITEM_DIAMOND_HOE(ResourcesEnum.ITEM_DIAMOND_HOE),
    ITEM_EMERALD(ResourcesEnum.ITEM_EMERALD),
    ITEM_EMPTY_SLOT_EMERALD(ResourcesEnum.ITEM_EMPTY_SLOT_EMERALD),
    ITEM_EMPTY_SLOT_HOE(ResourcesEnum.ITEM_EMPTY_SLOT_HOE),
    ITEM_GOLDEN_CARROT(ResourcesEnum.ITEM_GOLDEN_CARROT),
    ITEM_GOLDEN_HOE(ResourcesEnum.ITEM_GOLDEN_HOE),
    ITEM_IRON_HOE(ResourcesEnum.ITEM_IRON_HOE),
    ITEM_NETHERITE_HOE(ResourcesEnum.ITEM_NETHERITE_HOE),
    ITEM_ONION(ResourcesEnum.ITEM_ONION),
    ITEM_POTATO(ResourcesEnum.ITEM_POTATO),
    ITEM_TOMATO(ResourcesEnum.ITEM_TOMATO),
    ITEM_TOMATO_SEED(ResourcesEnum.ITEM_TOMATO_SEED),
    ITEM_VILLAGER_SPAWN_EGG(ResourcesEnum.ITEM_VILLAGER_SPAWN_EGG),
    ITEM_WHEAT(ResourcesEnum.ITEM_WHEAT),
    ITEM_WHEAT_SEED(ResourcesEnum.ITEM_WHEAT_SEED),
    ITEM_WRITABLE_BOOK(ResourcesEnum.ITEM_WRITABLE_BOOK),
    /* endregion */

    ;

    /** 延迟加载纹理，避免初始化时占用太多资源 */
    val texture: Texture by lazy { Texture(resource.inputStream!!).apply { load() } }
}
